---
import type { ComponentProps } from "astro/types";
import HeroFloatingImages, { HeroFloatingImages_Query } from "@/components/global/HeroFloatingImages.astro";
import AdvantagesShowcase, { AdvantagesShowcase_Query } from "@/components/global/AdvantagesShowcase.astro";
import EffectiveApproach, { EffectiveApproach_Query } from "@/components/global/EffectiveApproach.astro";
import HeaderSection, { HeaderSection_Query } from "@/components/global/HeaderSection.astro";
import Process, { Process_Query } from "@/components/global/Process.astro";
import QuoteCards, { QuoteCards_Query } from "@/components/global/QuoteCards.astro";
import PeopleDetails, { PeopleDetails_Query } from "@/components/global/PeopleDetails.astro";
import ContactForm, { ContactForm_Query } from "@/components/global/ContactForm.astro";
import MailingForm, { MailingForm_Query } from "@/components/global/MailingForm.astro";

export type ComponentsProps = ComponentProps<typeof HeaderSection> & { _type: string; index: number }[];

type Props = {
  data: ComponentsProps;
  indexStart?: number;
};

const { data, indexStart = 0 } = Astro.props;

const components = {
  HeroFloatingImages,
  AdvantagesShowcase,
  EffectiveApproach,
  HeaderSection,
  Process,
  QuoteCards,
  PeopleDetails,
  ContactForm,
  MailingForm,
};

export const Components_Query = /* groq */ `
  components[] {
    _type,
     _type == "HeroFloatingImages" => {
      ${HeroFloatingImages_Query}
    },
     _type == "AdvantagesShowcase" => {
      ${AdvantagesShowcase_Query}
    },
    _type == "EffectiveApproach" => {
      ${EffectiveApproach_Query}
    },
    _type == "HeaderSection" => {
      ${HeaderSection_Query}
    },
    _type == "Process" => {
      ${Process_Query}
    },
    _type == "QuoteCards" => {
      ${QuoteCards_Query}
    },
    _type == "PeopleDetails" => {
      ${PeopleDetails_Query}
    },
    _type == "ContactForm" => {
      ${ContactForm_Query}
    },
    _type == "MailingForm" => {
      ${MailingForm_Query}
    },
  },
`;
---

{
  data?.map((item, i) => {
    const DynamicComponent = components[item._type];
    if (!DynamicComponent) return null;
    return <DynamicComponent {...item} index={indexStart + i} />;
  })
}
