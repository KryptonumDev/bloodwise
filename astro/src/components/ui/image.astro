---
import type { ComponentProps } from "astro/types";
import { Image as AstroImage, Picture as AstroPicture } from "astro:assets";

export type ImageDataTypes = {
  asset: {
    url: string;
    altText: string;
    metadata: {
      dimensions: {
        width: number;
        height: number;
      };
      lqip: string;
    };
  };
};

export const ImageDataQuery = `
  asset -> {
    url,
    altText,
    metadata {
      dimensions {
        width,
        height,
      },
      lqip,
    },
  },
`;

type Props = {
  data: ImageDataTypes;
  sizes: string;
  priority?: boolean;
} & (
  | ({ asPicture?: true } & Partial<ComponentProps<typeof AstroPicture>>)
  | ({ asPicture: false } & Partial<ComponentProps<typeof AstroImage>>)
);

const { data, asPicture = true, priority, ...props } = Astro.props;

const Tag = asPicture ? AstroPicture : AstroImage;
---

{
  data?.asset && (
    <Tag
      {...({
        src: data.asset.url,
        alt: data.asset.altText || "",
        width: data.asset.metadata.dimensions.width,
        height: data.asset.metadata.dimensions.height,
        style: {
          background: `url(${data.asset.metadata.lqip}) center / cover no-repeat`,
        },
        onload: 'this.style.removeProperty("background")',
        widths: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],
        ...(asPicture && {
          formats: ["avif", "webp"],
        }),
        ...(priority && {
          loading: "eager",
          fetchpriority: "high",
        }),
        ...props,
      } as ComponentProps<typeof AstroImage | typeof AstroPicture>)}
    />
  )
}
