---
import { marked, type Tokens } from "marked";
import { isExternalLink } from "@/utils/is-external-link";
import type { HTMLAttributes } from "astro/types";

type Props = {
  tag?: "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "span";
} & HTMLAttributes<"div">;

const { tag, ...props } = Astro.props;
const Tag = tag || (Object.keys(props).length > 1 ? "div" : Fragment);

class CustomRenderer extends marked.Renderer {
  paragraph({ text }: Tokens.Paragraph) {
    if (tag) {
      return `${marked.parseInline(text)}`;
    } else {
      return `<p>${marked.parseInline(text)}</p>`;
    }
  }
  link({ href, text }: Tokens.Link) {
    const externalLinkAttrs = isExternalLink(href) ? 'target="_blank" rel="noopener"' : "";
    return `<a href="${href}" class="link" ${externalLinkAttrs}>${marked.parseInline(text)}</a>`;
  }
  list({ ordered, items }: Tokens.List) {
    if (ordered) {
      return `<ol class='ordered-list'>${items.map(({ text }) => `<li><span>${marked.parseInline(text)}</span></li>`).join("")}</ol>`;
    } else {
      return `<ul class='unordered-list'>${items
        .map(
          ({ text }) =>
            `<li><svg xmlns="http://www.w3.org/2000/svg" width="8" height="12" fill="#6BD6CD"><path d="M.102 6.747c.46-1.876 1.875-4.27 3.03-6.04a.964.964 0 0 1 1.62.002c1.81 2.794 2.639 4.73 2.934 6.038.336 1.488 0 4.692-3.744 4.752C.918 11.546-.393 8.77.102 6.747Z"/></svg><span>${marked.parseInline(text)}</span></li>`
        )
        .join("")}</ul>`;
    }
  }
}

const content = marked.parse(await Astro.slots.render("default"), {
  renderer: new CustomRenderer(),
});
---

<Tag set:html={content} {...props} />
