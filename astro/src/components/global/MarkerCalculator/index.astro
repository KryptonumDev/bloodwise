---
import { Icon } from "astro-icon/components";
import MailingForm from "./MailingForm.astro";
import Markdown from "@/components/ui/markdown.astro";
import Button from "@/components/ui/Button.astro";
import ResultInput from "./ResultInput.astro";
import CalculationResults from "./CalculationResults.astro";

export const MarkerCalculator_Query = `
  results {
    name,
    unit,
    isGenderSpecific,
    scope {
      value,
      name,
      color,
    }[],
    scopeGenederSpecific {
      female {
        value,
        name,
        color,
      }[],
      male {
        value,
        name,
        color,
      }[],
    },
    lowCauses {
      title,
      description,
    },
    highCauses {
      title,
      description,
    },
  }[],
  mailingForm {
    group_id,
    heading,
    paragraph,
  },
`;

export type Props = {
  index: number;
  results: {
    name: string;
    unit: string;
    isGenderSpecific: boolean;
    scope: {
      value: string;
      name: string;
      color: "red" | "orange" | "green";
    }[];
    scopeGenederSpecific: {
      female: {
        value: string;
        name: string;
        color: "red" | "orange" | "green";
      }[];
      male: {
        value: string;
        name: string;
        color: "red" | "orange" | "green";
      }[];
    };
    lowCauses: {
      title: string;
      description: string;
    };
    highCauses: {
      title: string;
      description: string;
    };
  }[];
  mailingForm: {
    group_id: string;
    heading: string;
    paragraph: string;
  };
};

const { results, mailingForm } = Astro.props;

const markers = results.map(({ name, unit }) => ({
  name: name,
  unit: unit,
}));
---

<section class='MarkerCalculator sec-wo-margin' dark-background id='wyniki'>
  <div class='max-width'>
    <article class='step' data-step={1}>
      <header>
        <Markdown tag='h2'>Sprawdź, czy Twoje biomarkery są optymalne</Markdown>
        <Markdown>
          Wpisz poniżej swoje wyniki badań i sprawdź, czy są w normach funkcjonalnych. Normy funkcjonalne oznaczają
          optymalne zakresy, czyli takie, w których funkcjonujesz najlepiej.
        </Markdown>
      </header>
      <div class='actions'>
        <p class='hint'>Wybierz swoją płeć</p>
        <label class='button'>
          <input type='radio' name='gender' value='female' />
          <Icon name='female' />
          <span>Kobieta</span>
        </label>
        <label class='button'>
          <input type='radio' name='gender' value='male' />
          <Icon name='male' />
          <span>Męźczyzna</span>
        </label>
      </div>
      <div class='navigation'>
        <Button type='button' disabled data-set-step={2} class='next-step'>Uzupełnij dane</Button>
      </div>
    </article>

    <article class='step' data-step={2} hidden>
      <header>
        <Markdown tag='h2'>Twój wiek</Markdown>
        <Markdown>Dzięki tej informacji, będziemy wiedzieć, że możemy sprawdzić Twoje badania.</Markdown>
      </header>
      <div class='actions'>
        <p class='hint'>Wskaż swój wiek</p>
        <label class='button'>
          <input type='radio' name='age' value='underage' />
          <span>Mam mniej niż 18 lat</span>
        </label>
        <label class='button'>
          <input type='radio' name='age' value='adlut' />
          <span>Mam więcej niż 18 lat. Jestem pełnoletni.</span>
        </label>
      </div>
      <div class='navigation'>
        <Button theme='secondary' type='button' data-set-step={1} class='prev-step'>Wróć</Button>
        <Button type='button' disabled data-set-step={3} class='next-step'>Wskaż badany marker</Button>
      </div>
    </article>

    <article class='step' data-step={3} hidden>
      <div data-step-variant={1} hidden>
        <header>
          <Markdown tag='h2'>Twoja zdrowa przygoda nie kończy się tutaj</Markdown>
          <Markdown>
            Chcesz dowiedzieć się więcej o swoim zdrowiu? Umów się na bezpłatną 20-minutową konsultację.
          </Markdown>
          <Button href='https://calendly.com/amelia-pietryka-bloodwise/20min'>Umów się na konsultację</Button>
        </header>
      </div>
      <div data-step-variant={2} hidden>
        <header>
          <Markdown tag='h2'>Wskaż marker krwi, który chcesz sprawdzić</Markdown>
          <Markdown>Wybierz 1 z {markers.length} markerów i sprawdź, czy Twoje wyniki sa prawidłowe.</Markdown>
        </header>
        <div class='actions'>
          <p class='hint'>Wskaż swój marker</p>
          {
            markers.map(({ name, unit }) => (
              <label class='button' data-variant='small'>
                <input type='radio' name='marker' value={name} data-unit={unit} />
                <span>{name}</span>
              </label>
            ))
          }
        </div>
      </div>
      <div class='navigation'>
        <Button theme='secondary' type='button' data-set-step={2} class='prev-step'>Wróć</Button>
        <Button type='button' disabled data-set-step={4} class='next-step'>Wpisz wynik</Button>
      </div>
    </article>

    <article class='step' data-step={4} hidden>
      <header>
        <Markdown tag='h2'>Podaj wynik badania</Markdown>
        <Markdown>Podaj wynik i przeanalizuj swoje badania.</Markdown>
      </header>
      <div class='marker'>
        <p class='hint'>Sprawdzasz wynik</p>
        <p class='marker-name'></p>
        <button class='marker-button link prev-step' data-set-step={3}>Zmień biomarker</button>
      </div>
      <ResultInput />
      <div class='navigation'>
        <Button theme='secondary' type='button' data-set-step={3} class='prev-step'>Wróć</Button>
        <Button type='button' disabled data-set-step={5} class='next-step'>Zobacz analizę</Button>
      </div>
    </article>

    <article class='step' data-step={5} hidden>
      <header>
        <Markdown tag='h2'><span class='h3'>Twój wynik badania dla</span><span class='heading-marker'></span></Markdown>
      </header>
      <CalculationResults results={results} />
      <div class='navigation'>
        <Button theme='secondary' type='button' data-set-step={4} class='prev-step'>Wróć</Button>
        <Button type='button' data-set-step={3} class='prev-step'>Sprawdź inny marker</Button>
      </div>
      <MailingForm {...mailingForm} />
    </article>
  </div>
</section>

<style lang='scss'>
  .MarkerCalculator {
    border-radius: 8px;
    background: linear-gradient(230deg, #006860, #01403b 62%);
    padding: clamp(48px, calc(80vw / 7.68), 80px) 0;
  }
  header {
    max-width: calc(592rem / 16);
    margin: 0 auto clamp(32px, calc(48vw / 7.68), 48px);
    display: grid;
    gap: clamp(12px, calc(16vw / 7.68), 16px);
    text-align: center;
    justify-items: center;
  }

  .step {
    &[data-step="3"] {
      @media (max-width: 499px) {
        .actions {
          justify-content: left;
        }
      }
    }
    &[data-step="4"] {
      .marker {
        text-align: center;
        .marker-name {
          width: fit-content;
          margin: 8px auto 12px;
          padding: 10px 12px;
          border-radius: 4px;
          border: 1px solid var(--primary-400, #6bd6cd);
          background: var(--primary-700, #066a62);
        }
      }
    }
    &[data-step="5"] {
      h2 {
        span {
          display: block;
        }
      }
    }
  }

  .hint {
    width: 100%;
    text-align: center;
    color: var(--background-300, #dfd1c2);
  }
  .actions {
    max-width: calc(592rem / 16);
    margin: 0 auto;
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
  .button {
    cursor: pointer;
    border-radius: 4px;
    border: 1px solid var(--primary-400, #6bd6cd);
    background: var(--primary-50, #f3fefd);
    color: var(--primary-900, #001b19);
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    gap: 8px;
    padding: 12px 24px 12px 44px;
    width: fit-content;
    position: relative;
    &::before {
      content: "";
      position: absolute;
      left: 24px;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      border: 1px solid var(--primary-500, #1cb6aa);
    }
    &::after {
      content: "";
      position: absolute;
      left: 26px;
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background-color: var(--primary-200, #c4f9f5);
      transition: transform 0.5s var(--easing);
      transform: scale(0);
    }
    &[data-variant="small"] {
      padding: 8px 10px 8px 32px;
      &::before {
        left: 10px;
      }
      &::after {
        left: 12px;
      }
    }
    &:not([data-variant="small"]) {
      @media (max-width: 499px) {
        width: 100%;
      }
    }
    transition:
      transform 0.5s var(--easing),
      background-color 0.5s var(--easing),
      color 0.5s var(--easing);
    transform-origin: bottom;
    input {
      opacity: 0;
      position: absolute;
    }
    &:has(input:checked) {
      transition-duration: 0s;
      color: var(--background-100, #fffcf9);
      background: var(--primary-700, #066a62);
      &::after {
        transform: scale(1);
      }
    }
    &:hover {
      background: var(--primary-200);
    }
    &:active {
      transition-duration: 0s;
      transform: scale(0.98);
    }
  }

  .navigation {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    gap: 12px;
    margin-top: 64px;
    @media (max-width: 499px) {
      flex-direction: column-reverse;
    }
  }
</style>

<script>
  function getRanges(parent: HTMLElement) {
    const rangeElements = parent.querySelectorAll(".result-bar-item");
    const ranges = [];
    rangeElements.forEach(element => {
      const rangeText = element.querySelector("span").textContent.trim();
      const variant = element.querySelector("div").getAttribute("data-variant");
      let min: number | null = null;
      let max: number | null = null;
      if (rangeText.startsWith("<")) {
        max = parseFloat(rangeText.slice(1));
      } else if (rangeText.startsWith(">")) {
        min = parseFloat(rangeText.slice(1));
      } else {
        const parts = rangeText.split("-").map(val => parseFloat(val.trim()));
        min = parts[0];
        max = parts.length > 1 ? parts[1] : null;
      }
      ranges.push({ min, max, variant });
    });
    return ranges;
  }

  function updateInputVariantRanges(
    inputElement: HTMLInputElement,
    ranges: { min: number | null; max: number | null; variant: string }[]
  ) {
    const value = parseFloat(inputElement.value);
    if (isNaN(value)) {
      inputElement.removeAttribute("data-variant");
      return;
    }
    let matchingRange = ranges.find(range => {
      if (range.min === null && range.max !== null) {
        return value < range.max;
      } else if (range.min !== null && range.max === null) {
        return value >= range.min;
      } else if (range.min !== null && range.max !== null) {
        return value >= range.min && value <= range.max;
      }
      return false;
    });
    if (matchingRange) {
      inputElement.setAttribute("data-variant", matchingRange.variant);
    } else {
      inputElement.removeAttribute("data-variant");
    }
    return ranges.indexOf(matchingRange);
  }

  function highlightResultBar(parent: HTMLDivElement | HTMLDetailsElement, index: number) {
    parent.querySelectorAll<HTMLDivElement>(".result-bar-item")?.forEach(resultBar => (resultBar.dataset.variant = ""));
    parent.querySelectorAll<HTMLDivElement>(".result-bar-item")[index].dataset.variant = "active";
  }

  function setStep(step: number) {
    document.querySelectorAll<HTMLDivElement>(".MarkerCalculator .step").forEach(element => (element.hidden = true));
    document.querySelector<HTMLDivElement>(`.MarkerCalculator .step[data-step="${step}"]`).hidden = false;
  }

  document.querySelectorAll(".MarkerCalculator").forEach(section => {
    const step4 = section.querySelector<HTMLDivElement>(".step[data-step='4']");
    step4.querySelector("input").addEventListener("input", function () {
      step4.querySelector<HTMLButtonElement>(".next-step").disabled = !(this.value.length > 0);
    });
    section.querySelectorAll<HTMLDivElement>(".step").forEach(step => {
      step.querySelectorAll<HTMLInputElement>("input[type='radio']").forEach(input => {
        input.addEventListener("change", function () {
          step.querySelector<HTMLButtonElement>(".next-step").disabled = false;
        });
      });

      step.querySelectorAll(".prev-step")?.forEach(prevStepButton => {
        prevStepButton.addEventListener("click", function () {
          setStep(this.dataset.setStep);
          const currentStep = section.querySelector<HTMLDivElement>(`.step[data-step='${step.dataset.step}']`);
          currentStep.querySelector<HTMLButtonElement>(".next-step")?.removeAttribute("style");
          currentStep
            .querySelectorAll<HTMLDivElement>("[data-step-variant]")
            ?.forEach(element => (element.hidden = true));
          if (step.dataset.step === "5") section.scrollIntoView({ behavior: "smooth" });
        });
      });

      step.querySelector(".next-step")?.addEventListener("click", function () {
        if (step.dataset.step === "2") {
          const nextStep = section.querySelector<HTMLDivElement>(".step[data-step='3']");
          if (step.querySelector<HTMLInputElement>("input:checked").value === "underage") {
            nextStep.querySelector<HTMLButtonElement>(".next-step").style.display = "none";
            nextStep.querySelector<HTMLDivElement>("[data-step-variant='1']").hidden = false;
          } else {
            nextStep.querySelector<HTMLDivElement>("[data-step-variant='2']").hidden = false;
          }
        }
        if (step.dataset.step === "3") {
          const step4 = section.querySelector<HTMLDivElement>(".step[data-step='4']");
          const selectedMarker = step.querySelector<HTMLInputElement>("input:checked");
          step4.querySelector<HTMLButtonElement>(".marker-name").textContent = selectedMarker.value;
          step4.querySelector<HTMLInputElement>(".result-input input").value = "";
          step4.querySelector<HTMLInputElement>(".result-input-unit").textContent = selectedMarker.dataset.unit;
          step4.querySelector<HTMLButtonElement>(".next-step").disabled = true;
          const step5 = section.querySelector<HTMLDivElement>(".step[data-step='5']");
          const resultSelectedVariant = step5.querySelector<HTMLDivElement>(
            `.result[data-step-variant="${selectedMarker.value}"]`
          );
          resultSelectedVariant.hidden = false;
          resultSelectedVariant.querySelector<HTMLInputElement>(".result-input-unit").textContent =
            selectedMarker.dataset.unit;
        }
        if (step.dataset.step === "4") {
          const step5 = section.querySelector<HTMLDivElement>(".step[data-step='5']");
          const headingMarker = step5.querySelector<HTMLDivElement>(".heading-marker");
          const marker = section.querySelector<HTMLInputElement>(".step[data-step='3'] input:checked").value;
          const selectedVariant = step5.querySelector<HTMLDivElement>(`.result[data-step-variant="${marker}"]`);
          const gender = section.querySelector<HTMLInputElement>(".step[data-step='1'] input:checked").value;
          const resultInput = selectedVariant.querySelector<HTMLInputElement>(".result-input input");
          resultInput.value = step.querySelector<HTMLInputElement>(".result-input input").value;
          const specificGenderDetails = step5.querySelector<HTMLDetailsElement>(
            `.result[data-step-variant="${marker}"] details[data-gender="${gender}"]`
          );
          const calculatedRangeIndex = updateInputVariantRanges(
            resultInput,
            getRanges(specificGenderDetails || selectedVariant)
          );
          if (specificGenderDetails) {
            specificGenderDetails.open = true;
            highlightResultBar(specificGenderDetails, calculatedRangeIndex);
          } else {
            highlightResultBar(selectedVariant, calculatedRangeIndex);
          }
          headingMarker.textContent = marker;
        }
        if (step.dataset.step === "5") {
          section.scrollIntoView({ behavior: "smooth" });
        }
        setStep(this.dataset.setStep);
      });
    });
  });
</script>
